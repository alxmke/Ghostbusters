'''
Sample Input:
------------
|   TREE   |
------------
| ID | P_ID|
------------
| 1  |  2  |
| 3  |  2  |
| 6  |  8  |
| 9  |  8  |
| 2  |  5  |
| 8  |  5  |
| 5  | NULL|
------------

Sample Output:
1 LEAF
2 INNER
3 LEAF
5 ROOT
6 LEAF
8 INNER
9 LEAF
'''

!MYSQL
/*
Enter your query here.
*/
SELECT a.ID,
    CASE
        WHEN P_ID IS NULL THEN 'ROOT'
        WHEN NOT EXISTS(SELECT 1 FROM TREE AS b WHERE b.P_ID = a.ID LIMIT 1) THEN 'LEAF'
        ELSE 'INNER'
    END
FROM TREE AS a;


-----------------------------------------------------------------------------------------------------

!PYTHON 3
# Complete the function below.
# user_follow_relationships is a list of tuples (userId, userId)
# user_likes is also a list of tuples (userId, tweetId)

def getRecommendedTweets(user_follow_relationships, user_likes, target_user, min_like_threshold):
    # construct a dict which holds all the target's follows
    target_follows = dict()
    for follower,follow in user_follow_relationships:
        if follower == target_user:
            target_follows[follow] = True
    
    # count the follow likes for each tweet 
    follow_likes = dict()
    for follow,tweet in user_likes:
        if follow in target_follows:
            follow_likes.setdefault(tweet, 0)
            follow_likes[tweet] += 1
    
    # return the follow tweets which are at or above the minimum like threshold, in sorted order
    return sorted([tweet for tweet, likes in follow_likes.items() if likes >= min_like_threshold])

-----------------------------------------------------------------------------------------------------

!PYTHON 3
# Enter your code here. Read input from STDIN. Print output to STDOUT
import fileinput
import re

for entry in fileinput.input():
    # strip newline from input, retrieve prefix data identifier
    entry = entry.rstrip().split(':')
    if(entry[0] == 'E'): # Emails
        # split email username from email domain, return in 
        email = entry[1].split('@')
        
        # print masked data 
        print("E:" + email[0][0] + "*****" + email[0][-1] + '@' + email[1])
    elif(entry[0] == 'P'): # Phone numbers
        # slice last four off number, save the rest
        last_four = entry[1][-4:]
        rest = entry[1][:-4]
        
        # remove user punctuation (except +'s)
        for c in ['(',' ',')','-']:
            if c in rest:
                rest = rest.replace(c,'')
        
        # place area code and first 3 digits
        phone_number = rest[-6:-3] + '-' + rest[-3:] + '-'
        
        # handle optional country code, prepend and format to number if exists
        country_code = rest[:-6]
        if country_code:
            phone_number = country_code + '-' + phone_number
 
        # mask all but area code
        for c in ['0','1','2','3','4','5','6','7','8','9']:
            if c in phone_number:
                phone_number = phone_number.replace(c,'*')

        # append last four
        phone_number += last_four
        
        # print masked data
        print("P:" + phone_number)
    else: # Unidentified data
        print("Error: unrecognized entry")
